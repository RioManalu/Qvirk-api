{
  "openapi": "3.1.1",
  "info": {
    "title": "Qvirk Restful API",
    "version": "1.0",
    "description": "OpenAPI for Qvirk Restful API",
    "contact": {
      "name": "Rio Hanson Manalu",
      "email": "riohansonmanalu16@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/license/mit"
    }
  },
  "servers": [
    {
      "description": "Qvirk Restful API Server",
      "url": "http://{environment}:7000/api",
      "variables": {
        "environment": {
          "description": "Server Environment",
          "default": "localhost",
          "enum": ["localhost", "dev", "qa", "prod"]
        }
      }
    }
  ],
  "paths": {
    "/users": {
      "post": {
        "tags": ["Users"],
        "summary": "Create new user",
        "description": "create new user to database",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["username", "password", "fullname"],
                "properties": {
                  "username": {
                    "type": "string",
                    "maxLength": 50
                  },
                  "password": {
                    "type": "string"
                  },
                  "fullname": {
                    "type": "string"
                  }
                }
              },
              "examples": {
                "rio": {
                  "description": "create user rio",
                  "value": {
                    "username": "rio",
                    "password": "passwordrio",
                    "fullname": "riohanson"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success create new user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "addedUser": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "username": {
                              "type": "string"
                            },
                            "fullname": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "success": {
                    "description": "example success create new user",
                    "value": {
                      "status": "success",
                      "code": 201,
                      "message": "new user created",
                      "data": {
                        "addedUser": {
                          "id": "user-yCPoSvPagLcF44smuVIX4",
                          "username": "riohanson",
                          "fullname": "riofullname"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "usernameNotAvailable": {
                    "description": "example fail username is not available",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 400,
                        "message": "username is not available",
                        "stack": "InvariantError: username is not available\n    at......."
                      }
                    }
                  },
                  "badPayload": {
                    "description": "example fail bad payload",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 400,
                        "message": "tidak dapat membuat user baru karena properti yang dibutuhkan tidak ada",
                        "stack": "InvariantError: tidak dapat membuat user baru karena properti yang dibutuhkan tidak ada\n    at ...."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/authentications": {
      "post": {
        "tags": ["Authentications"],
        "summary": "login user",
        "description": "create new access and refresh token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["username", "password"],
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              },
              "examples": {
                "rio": {
                  "description": "login user rio",
                  "value": {
                    "username": "riohanson",
                    "password": "secret123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success login user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "authentication": {
                          "type": "object",
                          "properties": {
                            "accesToken": {
                              "type": "string"
                            },
                            "refreshToken": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "success": {
                    "description": "example login success",
                    "value": {
                      "status": "success",
                      "code": 200,
                      "message": "login successful",
                      "data": {
                        "authentication": {
                          "accessToken": "ey....",
                          "refreshToken": "ey...."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "notFound": {
                    "description": "example fail username not found",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 400,
                        "message": "Username not found",
                        "stack": "InvariantError: Username not found\n    at ....."
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials (e.g., wrong username or password)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "wrongPassword": {
                    "description": "example fail wrong password",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 401,
                        "message": "wrong password",
                        "stack": "AuthenticationError: wrong password\n    at...."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Authentications"],
        "summary": "update existing access token",
        "description": "update existing access token using refreshToken in database",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refreshToken": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success update access token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "success": {
                    "description": "example update accessToken success",
                    "value": {
                      "status": "success",
                      "code": 200,
                      "message": "new accessToken created",
                      "data": {
                        "accessToken": "ey..."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "invalidRefreshToken": {
                    "description": "example fail invalid refresh token",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 400,
                        "message": "invalid refresh token",
                        "stack": "InvariantError: invalid refresh token\n    at...."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Authentications"],
        "summary": "logout user",
        "description": "delete existing refresh token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refreshToken": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "success logout user",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "notFound": {
                    "description": "example fail token not found",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 400,
                        "message": "token not found in database",
                        "stack": "InvariantError: token not found in database\n    at....."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects": {
      "post": {
        "tags": ["Projects"],
        "summary": "create new project",
        "description": "create new project to database",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name", "description"],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success create new project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "addedProject": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "created_by": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "success": {
                    "description": "example success create new project",
                    "value": {
                      "status": "success",
                      "code": 201,
                      "message": "new project created",
                      "data": {
                        "addedProject": {
                          "id": "project-D_ZKU5QJs0mrdKNsgRJk-",
                          "name": "project-A",
                          "created_by": "user-c5RCAGtHb7ZsH7gE9rXxT"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "badPayload": {
                    "description": "example fail bad request",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 400,
                        "message": "tidak dapat membuat project baru karena properti yang dibutuhkan tidak ada",
                        "stack": "InvariantError: tidak dapat membuat project baru karena properti yang dibutuhkan tidak ada\n    at...."
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed (invalid/missing token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "noToken": {
                    "description": "example fail missing token",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 401,
                        "message": "Access denied. No token provided.",
                        "stack": "AuthenticationError: Access denied. No token provided.\n    at...."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Projects"],
        "summary": "Get all projects owned by the authenticated user",
        "description": "get all project from database",
        "responses": {
          "200": {
            "description": "success get all projects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "projects": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "owner": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "success": {
                    "description": "example success get all projects",
                    "value": {
                      "status": "success",
                      "code": 200,
                      "message": "Projects retrieved successfully",
                      "data": {
                        "projects": [
                          {
                            "name": "project-A",
                            "description": "description project-A",
                            "owner": "riohanson"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed (invalid/missing token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "noToken": {
                    "description": "example fail missing token",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 401,
                        "message": "Access denied. No token provided.",
                        "stack": "AuthenticationError: Access denied. No token provided.\n    at...."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}": {
      "get": {
        "tags": ["Projects"],
        "summary": "get project by id owned by the authenticated user",
        "description": "get project from database",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "project id for get project by id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success get project by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "project": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "owner": {
                              "type": "string"
                            },
                            "created_at": {
                              "type": "string"
                            },
                            "updated_at": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "success": {
                    "description": "example success get project by id",
                    "value": {
                      "status": "success",
                      "code": 200,
                      "message": "Project retrieved successfully",
                      "data": {
                        "project": {
                          "name": "project-A",
                          "description": "description project-A",
                          "owner": "riohanson",
                          "created_at": "2025-07-22T06:41:33.478Z",
                          "updated_at": "2025-07-22T06:41:33.478Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "accessDenied": {
                    "description": "example fail access denied",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 403,
                        "message": "Access Denied",
                        "stack": "AuthorizationError: Access Denied\n    at......"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "notFound": {
                    "description": "example fail project not fouund",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 404,
                        "message": "Project Not Found",
                        "stack": "NotFoundError: Project Not Found\n    at ..."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Projects"],
        "summary": "edit project by id owned by the authenticated user",
        "description": "edit project from database",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "project id for edit project by id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name", "description"],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success edit project by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "project": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "owner": {
                              "type": "string"
                            },
                            "created_at": {
                              "type": "string"
                            },
                            "updated_at": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "success": {
                    "description": "example success edit project by id",
                    "value": {
                      "status": "success",
                      "code": 200,
                      "message": "Project updated successfully",
                      "data": {
                        "changes": {
                          "name": "project name",
                          "description": "project description",
                          "updated_at": "2025-07-22T08:02:33.836Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "invalidField": {
                    "description": "example fail invalid field",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 400,
                        "message": "Invalid Field",
                        "stack": "InvariantError: Invalid Field\n    at ....."
                      }
                    }
                  },
                  "badPayload": {
                    "description": "example fail bad payload",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 400,
                        "message": "tidak dapat mengedit project karena tipe data tidak sesuai",
                        "stack": "InvariantError: tidak dapat mengedit project karena tipe data tidak sesuai\n    at ..."
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "accessDenied": {
                    "description": "example fail access denied",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 403,
                        "message": "Cannot Edit Field",
                        "stack": "AuthorizationError: Cannot Edit Field\n    at ....."
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "notFound": {
                    "description": "example fail not found",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 404,
                        "message": "Project Not Found",
                        "stack": "NotFoundError: Project Not Found\n    at ...."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Projects"],
        "summary": "delete project by id owned by authenticated user",
        "description": "delete project from database",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "project id for delete project by id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "success delete project",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "accessDenied": {
                    "description": "example fail access denied",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 403,
                        "message": "Access Denied",
                        "stack": "AuthorizationError: Access Denied\n    at ...."
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "notFound": {
                    "description": "example fail not found",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 404,
                        "message": "Project Not Found",
                        "stack": "NotFoundError: Project Not Found\n    at ...."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/members": {
      "post": {
        "tags": ["Members"],
        "summary": "add member to project",
        "description": "add member to database",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "project id for add member to project",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["userId", "role"],
                "properties": {
                  "userId": {
                    "type": "string"
                  },
                  "role": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success addd member to project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "addedMember": {
                          "type": "object",
                          "properties": {
                            "project_id": {
                              "type": "string"
                            },
                            "user_id": {
                              "type": "string"
                            },
                            "role": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "success": {
                    "description": "example success add member to project",
                    "value": {
                      "status": "success",
                      "code": 201,
                      "message": "New Member Created",
                      "data": {
                        "addedMember": {
                          "project_id": "project-q7hCkTb7YC0rDUmznkB58",
                          "user_id": "user-patzt7T8I6zIk_NlJxpU4",
                          "role": "member"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "badPayload": {
                    "description": "example fail bad payload",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 400,
                        "message": "tidak dapat membuat member baru karena properti yang dibutuhkan tidak ada",
                        "stack": "InvariantError: tidak dapat membuat member baru karena properti yang dibutuhkan tidak ada\n    at ...."
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed (invalid/missing token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "noToken": {
                    "description": "example fail missing token",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 401,
                        "message": "Access denied. No token provided.",
                        "stack": "AuthenticationError: Access denied. No token provided.\n    at ...."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Members"],
        "summary": "get all project members",
        "description": "get all project members from database",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "project id for get all members from project",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success get all project members",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "members": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "project_id": {
                                "type": "string"
                              },
                              "user_id": {
                                "type": "string"
                              },
                              "role": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "success": {
                    "description": "example success get all project members",
                    "value": {
                      "status": "success",
                      "code": 200,
                      "message": "Members Retrieved Successfully",
                      "data": {
                        "members": [
                          {
                            "project_id": "project-q7hCkTb7YC0rDUmznkB58",
                            "user_id": "user-patzt7T8I6zIk_NlJxpU4",
                            "role": "member"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed (invalid/missing token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "noToken": {
                    "description": "example fail no token",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 401,
                        "message": "Access denied. No token provided.",
                        "stack": "AuthenticationError: Access denied. No token provided.\n    at ...."
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "notFound": {
                    "description": "example fail not found",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 404,
                        "message": "Project Not Found",
                        "stack": "NotFoundError: Project Not Found\n    at ...."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/members/{userId}": {
      "delete": {
        "tags": ["Members"],
        "summary": "delete member by id",
        "description": "delete member from database",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "project id for get project by id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "user id for delete member from project",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "success logout user",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Authentication failed (invalid/missing token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "noToken": {
                    "description": "example fail no token",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 401,
                        "message": "Access denied. No token provided.",
                        "stack": "AuthenticationError: Access denied. No token provided.\n    at ...."
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "accessDenied": {
                    "description": "example fail access denied",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 403,
                        "message": "Cannot Edit Field",
                        "stack": "AuthorizationError: Cannot Edit Field\n    at ....."
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "projectNotFound": {
                    "description": "example fail project not found",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 404,
                        "message": "Project Not Found",
                        "stack": "NotFoundError: Project Not Found\n    at ..."
                      }
                    }
                  },
                  "memberNotFound": {
                    "description": "example fail member not found",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 404,
                        "message": "Member Not Found",
                        "stack": "NotFoundError: Member Not Found\n    at ..."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/tasks": {
      "post": {
        "tags": ["Tasks"],
        "summary": "assign task to member in project",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "project id for get project by id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["title"],
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string",
                    "example": null
                  },
                  "status": {
                    "type": "string",
                    "enum": ["todo", "in_progress", "done"],
                    "example": "todo"
                  },
                  "priority": {
                    "type": "string",
                    "enum": ["low", "medium", "high", "urgent"],
                    "example": "low"
                  },
                  "due_date": {
                    "type": "string",
                    "example": null
                  },
                  "assignee_id": {
                    "type": "string",
                    "example": null
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success create new user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "addedTask": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "title": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "status": {
                              "type": "string"
                            },
                            "priority": {
                              "type": "string"
                            },
                            "due_date": {
                              "type": "string"
                            },
                            "project_id": {
                              "type": "string"
                            },
                            "created_by": {
                              "type": "string"
                            },
                            "assignee_id": {
                              "type": "string"
                            },
                            "created_at": {
                              "type": "string"
                            },
                            "updated_at": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "success": {
                    "description": "example success create new task",
                    "value": {
                      "status": "success",
                      "code": 201,
                      "message": "New Task Created",
                      "data": {
                        "addedTask": {
                          "id": "task-pNj5hVWRCuhg_e6DFA4FP",
                          "title": "task-title",
                          "description": "task-description",
                          "status": "in_progress",
                          "priority": "high",
                          "due_date": null,
                          "project_id": "project-q7hCkTb7YC0rDUmznkB58",
                          "created_by": "user-6I1Ll1-tghuDGHkoi35Uw",
                          "assignee_id": "user-patzt7T8I6zIk_NlJxpU4",
                          "created_at": "2025-07-22T10:35:29.334Z",
                          "updated_at": "2025-07-22T10:35:29.334Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "badPayload": {
                    "description": "example fail bad payload",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 400,
                        "message": "tidak dapat membuat task baru karena tipe data tidak sesuai",
                        "stack": "InvariantError: tidak dapat membuat task baru karena tipe data tidak sesuai\n    at ...."
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed (invalid/missing token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "noToken": {
                    "description": "example fail missing token",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 401,
                        "message": "Access denied. No token provided.",
                        "stack": "AuthenticationError: Access denied. No token provided.\n    at ...."
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "accessDenied": {
                    "description": "example fail access denied",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 403,
                        "message": "Access Denied",
                        "stack": "AuthorizationError: Access Denied\n    at......"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "projectNotFound": {
                    "description": "example fail project not found",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 404,
                        "message": "Project Not Found",
                        "stack": "NotFoundError: Project Not Found\n    at ..."
                      }
                    }
                  },
                  "memberNotFound": {
                    "description": "example fail member not found",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 404,
                        "message": "Member Not Found",
                        "stack": "NotFoundError: Member Not Found\n    at ..."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Tasks"],
        "summary": "get all project tasks by project id and condition",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "project id for get project by id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success get all project by project id and condition",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "tasks": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "title": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "status": {
                                "type": "string"
                              },
                              "priority": {
                                "type": "string"
                              },
                              "due_date": {
                                "type": "string"
                              },
                              "project_id": {
                                "type": "string"
                              },
                              "created_by": {
                                "type": "string"
                              },
                              "assignee_id": {
                                "type": "string"
                              },
                              "created_at": {
                                "type": "string"
                              },
                              "updated_at": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "success": {
                    "description": "example success get all project by project id and condition status in_progress",
                    "value": {
                      "status": "success",
                      "code": 200,
                      "message": "Tasks Retrieved Successfully",
                      "data": {
                        "tasks": [
                          {
                            "id": "task-pNj5hVWRCuhg_e6DFA4FP",
                            "title": "task-title",
                            "description": "task-description",
                            "status": "in_progress",
                            "priority": "high",
                            "due_date": null,
                            "project_id": "project-q7hCkTb7YC0rDUmznkB58",
                            "created_by": "user-6I1Ll1-tghuDGHkoi35Uw",
                            "assignee_id": "user-patzt7T8I6zIk_NlJxpU4",
                            "created_at": "2025-07-22T10:35:29.334Z",
                            "updated_at": "2025-07-22T10:35:29.334Z"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed (invalid/missing token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "noToken": {
                    "description": "example fail missing token",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 401,
                        "message": "Access denied. No token provided.",
                        "stack": "AuthenticationError: Access denied. No token provided.\n    at ...."
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "accessDenied": {
                    "description": "example fail access denied",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 403,
                        "message": "Access Denied",
                        "stack": "AuthorizationError: Access Denied\n    at......"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "projectNotFound": {
                    "description": "example fail project not found",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 404,
                        "message": "Project Not Found",
                        "stack": "NotFoundError: Project Not Found\n    at ..."
                      }
                    }
                  },
                  "memberNotFound": {
                    "description": "example fail member not found",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 404,
                        "message": "Member Not Found",
                        "stack": "NotFoundError: Member Not Found\n    at ..."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/tasks/{taskId}": {
      "get": {
        "tags": ["Tasks"],
        "summary": "get project task by project id and task id",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "project id for get project by id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "description": "task id for get task by id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success get project task by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "task": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "title": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "status": {
                              "type": "string"
                            },
                            "priority": {
                              "type": "string"
                            },
                            "due_date": {
                              "type": "string"
                            },
                            "project_id": {
                              "type": "string"
                            },
                            "created_by": {
                              "type": "string"
                            },
                            "assignee_id": {
                              "type": "string"
                            },
                            "created_at": {
                              "type": "string"
                            },
                            "updated_at": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "success": {
                    "description": "example success get project task by id",
                    "value": {
                      "status": "success",
                      "code": 200,
                      "message": "Task Retrieved Successfully",
                      "data": {
                        "task": {
                          "id": "task-pNj5hVWRCuhg_e6DFA4FP",
                          "title": "task-title",
                          "description": "task-description",
                          "status": "in_progress",
                          "priority": "high",
                          "due_date": null,
                          "project_id": "project-q7hCkTb7YC0rDUmznkB58",
                          "created_by": "user-6I1Ll1-tghuDGHkoi35Uw",
                          "assignee_id": "user-patzt7T8I6zIk_NlJxpU4",
                          "created_at": "2025-07-22T10:35:29.334Z",
                          "updated_at": "2025-07-22T10:35:29.334Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed (invalid/missing token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "noToken": {
                    "description": "example fail missing token",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 401,
                        "message": "Access denied. No token provided.",
                        "stack": "AuthenticationError: Access denied. No token provided.\n    at ...."
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "accessDenied": {
                    "description": "example fail access denied",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 403,
                        "message": "Access Denied",
                        "stack": "AuthorizationError: Access Denied\n    at......"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "projectNotFound": {
                    "description": "example fail project not found",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 404,
                        "message": "Project Not Found",
                        "stack": "NotFoundError: Project Not Found\n    at ..."
                      }
                    }
                  },
                  "memberNotFound": {
                    "description": "example fail member not found",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 404,
                        "message": "Member Not Found",
                        "stack": "NotFoundError: Member Not Found\n    at ..."
                      }
                    }
                  },
                  "taskNotFound": {
                    "description": "example fail member not found",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 404,
                        "message": "Task Not Found",
                        "stack": "NotFoundError: Task Not Found\n    at ...."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Tasks"],
        "summary": "edit project task by id",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "project id for get project by id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "description": "task id for get task by id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success edit project task by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "changes": {
                          "type": "object",
                          "properties": {
                            "title": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "status": {
                              "type": "string"
                            },
                            "priority": {
                              "type": "string"
                            },
                            "due_date": {
                              "type": "string"
                            },
                            "assignee_id": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "success": {
                    "description": "example success edit project task by id",
                    "value": {
                      "status": "success",
                      "code": 200,
                      "message": "Task Updated Successfully",
                      "data": {
                        "changes": {
                          "title": "new-title",
                          "description": "new-description",
                          "status": "in_progress",
                          "priority": "urgent",
                          "due_date": null,
                          "assignee_id": "user-patzt7T8I6zIk_NlJxpU4"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed (invalid/missing token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "noToken": {
                    "description": "example fail missing token",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 401,
                        "message": "Access denied. No token provided.",
                        "stack": "AuthenticationError: Access denied. No token provided.\n    at ...."
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "accessDenied": {
                    "description": "example fail access denied",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 403,
                        "message": "Access Denied",
                        "stack": "AuthorizationError: Access Denied\n    at......"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "projectNotFound": {
                    "description": "example fail project not found",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 404,
                        "message": "Project Not Found",
                        "stack": "NotFoundError: Project Not Found\n    at ..."
                      }
                    }
                  },
                  "memberNotFound": {
                    "description": "example fail member not found",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 404,
                        "message": "Member Not Found",
                        "stack": "NotFoundError: Member Not Found\n    at ..."
                      }
                    }
                  },
                  "taskNotFound": {
                    "description": "example fail member not found",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 404,
                        "message": "Task Not Found",
                        "stack": "NotFoundError: Task Not Found\n    at ...."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Tasks"],
        "summary": "delete task by id",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "project id for get project by id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "description": "task id for get task by id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "success logout user",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Authentication failed (invalid/missing token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "noToken": {
                    "description": "example fail missing token",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 401,
                        "message": "Access denied. No token provided.",
                        "stack": "AuthenticationError: Access denied. No token provided.\n    at ...."
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "accessDenied": {
                    "description": "example fail access denied",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 403,
                        "message": "Access Denied",
                        "stack": "AuthorizationError: Access Denied\n    at......"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "projectNotFound": {
                    "description": "example fail project not found",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 404,
                        "message": "Project Not Found",
                        "stack": "NotFoundError: Project Not Found\n    at ..."
                      }
                    }
                  },
                  "memberNotFound": {
                    "description": "example fail member not found",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 404,
                        "message": "Member Not Found",
                        "stack": "NotFoundError: Member Not Found\n    at ..."
                      }
                    }
                  },
                  "taskNotFound": {
                    "description": "example fail member not found",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 404,
                        "message": "Task Not Found",
                        "stack": "NotFoundError: Task Not Found\n    at ...."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/tasks/{taskId}/comments": {
      "post": {
        "tags": ["Comments"],
        "summary": "add comment to task",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "project id for get project by id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "description": "task id for get task by id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["content"],
                "properties": {
                  "content": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success create new user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "addedComment": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "content": {
                              "type": "string"
                            },
                            "task_id": {
                              "type": "string"
                            },
                            "user_id": {
                              "type": "string"
                            },
                            "created_at": {
                              "type": "string"
                            },
                            "updated_at": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "success": {
                    "description": "example success create new comment",
                    "value": {
                      "status": "success",
                      "code": 201,
                      "message": "New Comment Created",
                      "data": {
                        "addedComment": {
                          "id": "comment-_6-T3i-LFopNaopErc2PJ",
                          "content": "comment-content",
                          "task_id": "task-LembGvNZ1Gnco8F8f3k8J",
                          "user_id": "user-7wx8Y149VDm6C9csAu6Lr",
                          "created_at": "2025-07-22T13:46:05.106Z",
                          "updated_at": "2025-07-22T13:46:05.106Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "badPayload": {
                    "description": "example fail bad request",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 400,
                        "message": "tidak dapat membuat comment baru karena properti yang dibutuhkan tidak ada",
                        "stack": "InvariantError: tidak dapat membuat comment baru karena properti yang dibutuhkan tidak ada\n    at ...."
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed (invalid/missing token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "noToken": {
                    "description": "example fail missing token",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 401,
                        "message": "Access denied. No token provided.",
                        "stack": "AuthenticationError: Access denied. No token provided.\n    at ...."
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "accessDenied": {
                    "description": "example fail access denied",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 403,
                        "message": "Access Denied",
                        "stack": "AuthorizationError: Access Denied\n    at......"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "projectNotFound": {
                    "description": "example fail project not found",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 404,
                        "message": "Project Not Found",
                        "stack": "NotFoundError: Project Not Found\n    at ..."
                      }
                    }
                  },
                  "memberNotFound": {
                    "description": "example fail member not found",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 404,
                        "message": "Member Not Found",
                        "stack": "NotFoundError: Member Not Found\n    at ..."
                      }
                    }
                  },
                  "taskNotFound": {
                    "description": "example fail member not found",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 404,
                        "message": "Task Not Found",
                        "stack": "NotFoundError: Task Not Found\n    at ...."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Tasks"],
        "summary": "get all comments in task id by user id",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "project id for get project by id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "description": "task id for get task by id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success get project task by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "properties": {
                        "comments": {
                          "type": "array",
                          "items": {
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "content": {
                                "type": "string"
                              },
                              "task_id": {
                                "type": "string"
                              },
                              "username": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "success": {
                    "description": "example success get project task by id",
                    "value": {
                      "status": "success",
                      "code": 200,
                      "message": "Task Retrieved Successfully",
                      "data": {
                        "task": {
                          "id": "task-pNj5hVWRCuhg_e6DFA4FP",
                          "title": "task-title",
                          "description": "task-description",
                          "status": "in_progress",
                          "priority": "high",
                          "due_date": null,
                          "project_id": "project-q7hCkTb7YC0rDUmznkB58",
                          "created_by": "user-6I1Ll1-tghuDGHkoi35Uw",
                          "assignee_id": "user-patzt7T8I6zIk_NlJxpU4",
                          "created_at": "2025-07-22T10:35:29.334Z",
                          "updated_at": "2025-07-22T10:35:29.334Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed (invalid/missing token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "noToken": {
                    "description": "example fail missing token",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 401,
                        "message": "Access denied. No token provided.",
                        "stack": "AuthenticationError: Access denied. No token provided.\n    at ...."
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "accessDenied": {
                    "description": "example fail access denied",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 403,
                        "message": "Access Denied",
                        "stack": "AuthorizationError: Access Denied\n    at......"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "projectNotFound": {
                    "description": "example fail project not found",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 404,
                        "message": "Project Not Found",
                        "stack": "NotFoundError: Project Not Found\n    at ..."
                      }
                    }
                  },
                  "memberNotFound": {
                    "description": "example fail member not found",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 404,
                        "message": "Member Not Found",
                        "stack": "NotFoundError: Member Not Found\n    at ..."
                      }
                    }
                  },
                  "taskNotFound": {
                    "description": "example fail member not found",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 404,
                        "message": "Task Not Found",
                        "stack": "NotFoundError: Task Not Found\n    at ...."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/tasks/{taskId}/comments/{commentId}": {
      "put": {
        "tags": ["Comments"],
        "summary": "edit comment by id",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "project id for get project by id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "description": "task id for get task by id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "description": "comment id for edit comment by id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["content"],
                "properties": {
                  "content": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success edit project task by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "changes": {
                          "type": "object",
                          "properties": {
                            "title": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "status": {
                              "type": "string"
                            },
                            "priority": {
                              "type": "string"
                            },
                            "due_date": {
                              "type": "string"
                            },
                            "assignee_id": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "success": {
                    "description": "example success edit project task by id",
                    "value": {
                      "status": "success",
                      "code": 200,
                      "message": "Task Updated Successfully",
                      "data": {
                        "changes": {
                          "title": "new-title",
                          "description": "new-description",
                          "status": "in_progress",
                          "priority": "urgent",
                          "due_date": null,
                          "assignee_id": "user-patzt7T8I6zIk_NlJxpU4"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "badPayload": {
                    "description": "example fail invalid refresh token",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 400,
                        "message": "tidak dapat mengubah comment karena tipe data tidak sesuai",
                        "stack": "InvariantError: tidak dapat mengubah comment karena tipe data tidak sesuai\n    at ...."
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed (invalid/missing token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "noToken": {
                    "description": "example fail missing token",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 401,
                        "message": "Access denied. No token provided.",
                        "stack": "AuthenticationError: Access denied. No token provided.\n    at ...."
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "accessDenied": {
                    "description": "example fail access denied",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 403,
                        "message": "Access Denied",
                        "stack": "AuthorizationError: Access Denied\n    at......"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "projectNotFound": {
                    "description": "example fail project not found",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 404,
                        "message": "Project Not Found",
                        "stack": "NotFoundError: Project Not Found\n    at ..."
                      }
                    }
                  },
                  "memberNotFound": {
                    "description": "example fail member not found",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 404,
                        "message": "Member Not Found",
                        "stack": "NotFoundError: Member Not Found\n    at ..."
                      }
                    }
                  },
                  "taskNotFound": {
                    "description": "example fail member not found",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 404,
                        "message": "Task Not Found",
                        "stack": "NotFoundError: Task Not Found\n    at ...."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Comments"],
        "summary": "delete comment by id",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "project id for get project by id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "description": "task id for get task by id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "description": "comment id for edit comment by id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "success logout user",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Authentication failed (invalid/missing token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "noToken": {
                    "description": "example fail missing token",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 401,
                        "message": "Access denied. No token provided.",
                        "stack": "AuthenticationError: Access denied. No token provided.\n    at ...."
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "accessDenied": {
                    "description": "example fail access denied",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 403,
                        "message": "Access Denied",
                        "stack": "AuthorizationError: Access Denied\n    at......"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                },
                "examples": {
                  "projectNotFound": {
                    "description": "example fail project not found",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 404,
                        "message": "Project Not Found",
                        "stack": "NotFoundError: Project Not Found\n    at ..."
                      }
                    }
                  },
                  "memberNotFound": {
                    "description": "example fail member not found",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 404,
                        "message": "Member Not Found",
                        "stack": "NotFoundError: Member Not Found\n    at ..."
                      }
                    }
                  },
                  "taskNotFound": {
                    "description": "example fail task not found",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 404,
                        "message": "Task Not Found",
                        "stack": "NotFoundError: Task Not Found\n    at ...."
                      }
                    }
                  },
                  "commentNotFound": {
                    "description": "example fail comment not found",
                    "value": {
                      "error": {
                        "status": "fail",
                        "code": 404,
                        "message": "Comment Not Found",
                        "stack": "NotFoundError: Comment Not Found\n    at ...."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "error400": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string"
              },
              "code": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "stack": {
                "type": "string"
              }
            }
          }
        }
      }
    }
  }
}
